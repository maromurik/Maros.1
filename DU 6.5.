#FLOYDSTENBERGOV DITERING

import PIL
from PIL import Image
obr = Image.open("img.png")
sirka,vyska = obr.size
pixels = obr.load()
def makegrey(pixel:tuple):
    avg = pixel[0]+pixel[1]+pixel[2]//3
    return (avg,avg,avg)

def difftuples(t1,t2):
    return(t1[0]-t2[0],t1[1]-t2[1],t1[2]-t2[2])
def add(t1,t2):
    return(t1[0]+t2[0],t1[1]+t2[1],t1[2]+t2[2])

def nasobit(tupla1,cislo):
    return(int(tupla1[0]*cislo),int(tupla1[1]*cislo),int(tupla1[2]*cislo))


for y in range(1,vyska-1):
    for x in range(1,sirka-1):
        oldpixel = pixels[x,y]
        newpixel = makegrey(oldpixel)
        pixels[x,y] = newpixel
        quant_error = difftuples(oldpixel,newpixel)
        pixels[x +1,y] = add(pixels[x + 1,y] , nasobit(quant_error,7/16))
        pixels[x - 1,y + 1] = add(pixels[x - 1,y + 1] , nasobit(quant_error,5/16))
        pixels[x,y + 1] = add(pixels[x,y + 1] , nasobit(quant_error,3/16))
        pixels[x + 1,y + 1] = add(pixels[x + 1,y + 1] , nasobit(quant_error,1/16))

obr.show()

#DU pomocou pixelmapy flipni obrazok zrkadlovo
